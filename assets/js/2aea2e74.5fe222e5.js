"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[384],{6095:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"hardware-docs/hdmi_tx","title":"HDMI TX","description":"Let\'s verify HDMI TX.","source":"@site/docs/hardware-docs/hdmi_tx.mdx","sourceDirName":"hardware-docs","slug":"/hardware-docs/hdmi_tx","permalink":"/test/docs/hardware-docs/hdmi_tx","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"HDMI RX","permalink":"/test/docs/hardware-docs/hdmi_rx"},"next":{"title":"MIPI CSI","permalink":"/test/docs/hardware-docs/mipi_csi"}}');var t=i(4848),r=i(8453),d=i(6629);i(6540);const o={sidebar_position:3},l="HDMI TX",a={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"1. Prerequisites",id:"1-prerequisites",level:2},{value:"2. Video sinks available",id:"2-video-sinks-available",level:2},{value:"2.1 Wayland Sink",id:"21-wayland-sink",level:3},{value:"2.2 KMS Sink.",id:"22-kms-sink",level:3},{value:"2.3 XvImageSink.",id:"23-xvimagesink",level:3},{value:"3.HDMI configuration",id:"3hdmi-configuration",level:2},{value:"4. Interface Testing",id:"4-interface-testing",level:2},{value:"4.1 Connect the HDMI Sink",id:"41-connect-the-hdmi-sink",level:3},{value:"4.2 Verify Signal Detection",id:"42-verify-signal-detection",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"hdmi-tx",children:"HDMI TX"})}),"\n",(0,t.jsxs)(n.p,{children:["Let's verify ",(0,t.jsx)(n.strong,{children:"HDMI TX"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,t.jsxs)(n.p,{children:["This guide explains how to test the ",(0,t.jsx)(n.strong,{children:"HDMI Transmitter (TX)"})," interface on ",d.DU," ",d._E,". Follow the steps below to verify HDMI signal integrity, resolution handling, and audio/video passthrough."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"1-prerequisites",children:"1. Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before starting HDMI RX/TX testing, ensure the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"HDMI source (e.g., laptop, media player)."}),"\n",(0,t.jsx)(n.li,{children:"HDMI sink/display (e.g., monitor, TV)."}),"\n",(0,t.jsx)(n.li,{children:"Proper HDMI cables (High-Speed recommended)."}),"\n",(0,t.jsx)(n.li,{children:"Access to the target board console."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-video-sinks-available",children:"2. Video sinks available"}),"\n",(0,t.jsxs)(n.p,{children:["Gstreamer on ",d.DU," ",d._E," supports three video sinks."]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["The main video sink is the ",(0,t.jsx)(n.code,{children:"waylandsink"})," which uses the wayland protocol and compositor to display the video output."]}),"\n",(0,t.jsxs)(n.li,{children:[d.DU," ",d._E," also supports the ",(0,t.jsx)(n.code,{children:"DRM KMS sink"})," which displays video frames directly to a Linux DRM device using the kmssink."]}),"\n",(0,t.jsxs)(n.li,{children:["The xvimagesink is supported when ",d.DU," ",d._E," is running an image with the X11 based display server."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"21-wayland-sink",children:"2.1 Wayland Sink"}),"\n",(0,t.jsxs)(n.p,{children:["Many of the following examples use the Wayland video sink to create a window and render the decoded frames (see ",(0,t.jsx)(n.a,{href:"https://gstreamer.freedesktop.org/documentation/waylandsink/index.html?gi-language=c#waylandsink",children:"GStreamer documentation"})," for more details)"]}),"\n",(0,t.jsx)(n.p,{children:"When using the Wayland sink, please make sure to set the following variables in your environment. These variables may need to be set when running commands from the serial console or a remote shell:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"export XDG_RUNTIME_DIR=/var/run/user/0\nexport WAYLAND_DISPLAY=wayland-1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"XDG_RUNTIME_DIR"})," variable specifies the directory which contains the Wayland socket belonging to the user. The ",(0,t.jsx)(n.code,{children:"WAYLAND_DISPLAY"})," variable specifies which Wayland compositor to connect to."]}),"\n",(0,t.jsx)(n.h3,{id:"22-kms-sink",children:"2.2 KMS Sink."}),"\n",(0,t.jsxs)(n.p,{children:["The KMS sink supports displaying video without the need to run a windowing system like Wayland, since it can interface directly with Linux DRM devices. (see ",(0,t.jsx)(n.a,{href:"https://gstreamer.freedesktop.org/documentation/kms/index.html?gi-language=c",children:"GStreamer documentation"})," for more details)"]}),"\n",(0,t.jsxs)(n.p,{children:["Before using ",(0,t.jsx)(n.code,{children:"kmssink"})," be sure to disable the Wayland service if it is running:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"systemctl stop weston.service\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You will also need to identify the plane id for the main plane and provide this id to the ",(0,t.jsx)(n.code,{children:"kmssink"})," element. You can identify the plane id using the ",(0,t.jsx)(n.code,{children:"modetest"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"modetest -M synaptics\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Identify the plane id of the plane which supports ",(0,t.jsx)(n.code,{children:"formats: NV12 NV21 UYVY VYUY YUYV YVYU"})]}),"\n",(0,t.jsx)(n.h3,{id:"23-xvimagesink",children:"2.3 XvImageSink."}),"\n",(0,t.jsxs)(n.p,{children:["The XvImage sink supports displaying video using the X11 backend. This can be used by, replacing ",(0,t.jsx)(n.code,{children:"waylandsink"})," with ",(0,t.jsx)(n.code,{children:"xvimagesink"})," in the Gstreamer commands. (see ",(0,t.jsx)(n.a,{href:"https://gstreamer.freedesktop.org/documentation/xvimagesink/index.html?gi-language=c",children:"GStreamer documentation"})," for more details)."]}),"\n",(0,t.jsx)(n.h2,{id:"3hdmi-configuration",children:"3.HDMI configuration"}),"\n",(0,t.jsx)(n.p,{children:"HDMI configuration options in dts are as below:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"hdtx-core-config:"})," Used to configure HDMI output, it includes bitfields to control below options."]}),"\n",(0,t.jsxs)(n.p,{children:["Default options:",(0,t.jsx)(n.code,{children:"hdtx-core-config = /bits/ 8 <1 0 1>"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"HPD handling: To enable/disable handling of sink hotplug. If HPD handling is disabled, output format will be configured on bootup depending on sink capability and retained till next reboot."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"HDCP control: To enable/disabled HDCP. Currently not handled."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"FixedModeset: To let SYNA DRM/KMS driver handle the mode setting internally without exposing user interface. If set, it will configure output format without requiring the userspace application to configure output format, any attempt to override the configured format will be ignored."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"hdtx-supported-formats:"})," Used to list the formats exposed to user via kms mode query."]}),"\n",(0,t.jsxs)(n.p,{children:["Default selection: ",(0,t.jsx)(n.code,{children:"hdtx-supported-formats = /bits/ 8 <12 9 10 13 22 21 19 26 25 24 61 62 64>"})]}),"\n",(0,t.jsx)(n.p,{children:"Refer below file for resolution indices in"}),"\n",(0,t.jsx)(n.p,{children:"'build/workspace/sources/linux-dct/drivers/soc/berlin/modules/avio/vpp/ca/include/vpp_defines.h'"}),"\n",(0,t.jsxs)(n.p,{children:["If needed, this can be overridden using parameter ",(0,t.jsx)(n.code,{children:"hdmi_preferred_mode"}),", by adding/modifying the same in ",(0,t.jsx)(n.code,{children:"/etc/modprobe.d/syna_drm.conf"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example: To override preferred modes as 1080p: hdmi_preferred_mode=1920x1080"}),"\n",(0,t.jsx)(n.p,{children:"Below is out of box default configuration,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["syna drm/kms driver will internally configure HDMI output format.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On connecting 4K supported sink, 4K30 RGB 8bit format will be selected."}),"\n",(0,t.jsx)(n.li,{children:"On 1080p TV, output will be configured as 1080p60 RGB 8bit."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Preferred mode of EDID is override to 1080p."}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["For more informations refer ",(0,t.jsx)(n.a,{href:"https://synaptics-astra.github.io/doc/v/1.6.0/subject/syna_drm_kms_user_guide.html#generic-display-configuration",children:"general display configuration modes"}),"."]}),(0,t.jsx)(n.p,{children:"For HDMI display ID, depending on the capability of the SINK at bootup only 4K or 1080P are supported at present."})]}),"\n",(0,t.jsx)(n.h2,{id:"4-interface-testing",children:"4. Interface Testing"}),"\n",(0,t.jsx)(n.h3,{id:"41-connect-the-hdmi-sink",children:"4.1 Connect the HDMI Sink"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Connect the HDMI sink device to the ",(0,t.jsx)(n.strong,{children:"HDMI OUT/TX (J5)"})," port of the board."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"42-verify-signal-detection",children:"4.2 Verify Signal Detection"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"On the console, check logs using:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"dmesg | grep -i hdmi\n"})}),"\n",(0,t.jsx)(n.p,{children:"or"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cat /sys/class/drm/card0-HDMI-A-1/status\n"})}),"\n",(0,t.jsx)(n.p,{children:"Expected output:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"connected\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can route video to any of the available sinks available using Gstreamer utility (Refer ",(0,t.jsx)(n.a,{href:"https://synaptics-astra.github.io/doc/v/1.6.0/linux/index.html#video-playback",children:"Playing a video file"})," for more commands)."]}),"\n",(0,t.jsx)(n.p,{children:"Also the SYNA DRM/KMS driver testing can be done by:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Disable Weston"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"systemctl stop weston.service\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. Identify the plane id for the main plane"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"modetest -M synaptics\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"3. Use Modetest tool to route a sample pattern to hdmi-tx"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"modetest"})," is a tool provided by libdrm library and is available as part of the SDK release/image (/usr/local/bin/modetest).\nFollowing are some of the tasks performed with modetest"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"List all display capabilities: CRTCs, encoders & connectors (DP, HDMI, DSI \u2026), planes, modes\u2026"}),"\n",(0,t.jsx)(n.li,{children:"Perform basic tests: display a test pattern, display 2 layers, perform a vsync test."}),"\n",(0,t.jsx)(n.li,{children:"Specify the video mode: resolution and refreshrate."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Below is the syntax.:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"modetest -M synaptics -s <connector_id> [,\n<connector_id>][@<crtc_id>]:[#<mode index>]<mode>[-<vrefresh>][@<format>]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.code,{children:"modetest -M synaptics -s 43:1920x1080"})]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},6629:e=>{e.exports=JSON.parse('{"DU":"Sentinel","_E":"SOM_SL1680_Mk1","tH":"CMSAC1_AS6806_A","mQ":"sentinel_som_sl1680_mk1","zn":"EVK_SL1680_Mk1","sV":"CMCGAS_AGSL_A","UW":"sentinel-core","ND":"sentinel-media","Uf":"sentinel-media-oobe","IM":"meta-dctk-sentinel","Cy":"root","PO":"setinel"}')},8453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function d(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);