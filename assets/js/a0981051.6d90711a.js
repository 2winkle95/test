"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[714],{6629:e=>{e.exports=JSON.parse('{"DU":"Sentinel","_E":"SOM_SL1680_Mk1","tH":"CMSAC1_AS6806_A","mQ":"sentinel_som_sl1680_mk1","zn":"EVK_SL1680_Mk1","sV":"CMCGAS_AGSL_A","UW":"sentinel-core","ND":"sentinel-media","Uf":"sentinel-media-oobe","IM":"meta-dctk-sentinel","Cy":"root","PO":"setinel"}')},6715:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/spi_1-0b0e2541907e71ee9023db19ec389a01.png"},7362:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"hardware-docs/spi","title":"SPI","description":"Let\'s verify SPI.","source":"@site/docs/hardware-docs/spi.mdx","sourceDirName":"hardware-docs","slug":"/hardware-docs/spi","permalink":"/test/docs/hardware-docs/spi","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"GPIO","permalink":"/test/docs/hardware-docs/gpio"},"next":{"title":"I2S","permalink":"/test/docs/hardware-docs/i2s"}}');var i=s(4848),d=s(8453),_=s(6629);s(6540);const r={sidebar_position:7},l="SPI",a={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"SPI Lines on 40 pin header",id:"spi-lines-on-40-pin-header",level:2},{value:"Connection diagram",id:"connection-diagram",level:2},{value:"Adding spidev node in dts",id:"adding-spidev-node-in-dts",level:2},{value:"Adding spidev_test tool to the build image",id:"adding-spidev_test-tool-to-the-build-image",level:2},{value:"Steps:",id:"steps",level:4},{value:"Testing the SPI interface",id:"testing-the-spi-interface",level:2}];function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"spi",children:"SPI"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's verify ",(0,i.jsx)(n.strong,{children:"SPI"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,i.jsxs)(n.p,{children:[_.DU," ",_._E," has two SPI interfaces. One is connected to the internel spi flash (16 Mb) and the second one is connected to the 40-pin GPIO header. This can be verified by connecting an externel nor flash to the SPI lines and accessing the same from user space with spidev_test tool."]}),"\n",(0,i.jsx)(n.h2,{id:"spi-lines-on-40-pin-header",children:"SPI Lines on 40 pin header"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Pin No"}),(0,i.jsx)(n.th,{children:"Name"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"23"}),(0,i.jsx)(n.td,{children:"SM_SPI2_SS1_LV"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"24"}),(0,i.jsx)(n.td,{children:"SM_SPI2_SDI_LV"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"25"}),(0,i.jsx)(n.td,{children:"SM_SPI2_SS0_LV"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"27"}),(0,i.jsx)(n.td,{children:"SM_SPI2_CLK_LV"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"28"}),(0,i.jsx)(n.td,{children:"SM_SPI2_SS3_LV"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"30"}),(0,i.jsx)(n.td,{children:"SM_SPI2_SDO_LV"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"connection-diagram",children:"Connection diagram"}),"\n",(0,i.jsx)(n.p,{children:"Connect an externel NOR flash to the SPI lines as per the diagrem below."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Alt spi_1",src:s(6715).A+"",width:"5750",height:"4460"})}),"\n",(0,i.jsx)(n.h2,{id:"adding-spidev-node-in-dts",children:"Adding spidev node in dts"}),"\n",(0,i.jsxs)(n.p,{children:["For accessing the SPI from user sapce we need to add spidev node in dts. Make the following change in ",(0,i.jsx)(n.code,{children:"build/workspace/sources/linux-dct/arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-git",children:'From 1e07e2bbe94a1af9ed36f1e47bcba62b4d2355fc Mon Sep 17 00:00:00 2001\nFrom: OpenEmbedded <oe.patch@oe>\nDate: Fri, 11 Jul 2025 15:06:29 +0530\nSubject: [PATCH 2/3] Adding spidev node to access spi from userspace\n\n---\n arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts | 24 +++++++++++++++++++++-\n 1 file changed, 23 insertions(+), 1 deletion(-)\n\ndiff --git a/arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts b/arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts\nindex a7a4d928437e..c14d88438fea 100644\n--- a/arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts\n+++ b/arch/arm64/boot/dts/dct/sentinel-sl1680-rdk.dts\n@@ -494,7 +494,7 @@ &uart0 {\n };\n\n &uart2 {\n-   status = "okay";\n+   status = "disabled";\n    pinctrl-0 = <&uart2_pmux>;\n    pinctrl-names = "default";\n };\n@@ -985,3 +985,25 @@ levelshift_en {\n        };\n    };\n };\n+\n+&spi0 {\n+    status = "okay";\n+    // Enable spidev for chip select 0\n+    spidev@0 {\n+        compatible = "micron,spi-authenta";\n+        reg = <0>;  // chip select 0\n+        spi-max-frequency = <50000000>;\n+        status = "okay";\n+    };\n+};\n+\n+&spi1 {\n+    status = "okay";\n+    // Enable spidev for chip select 0\n+    spidev@0 {\n+        compatible = "micron,spi-authenta";\n+        reg = <0>;  // chip select 0\n+        spi-max-frequency = <50000000>;\n+        status = "okay";\n+    };\n+};\n-- \n2.25.1\n'})}),"\n",(0,i.jsx)(n.p,{children:"This changes will add the spidevX.X node in the /dev so that you can acess the SPI bus with spidev_test tool."}),"\n",(0,i.jsx)(n.h2,{id:"adding-spidev_test-tool-to-the-build-image",children:"Adding spidev_test tool to the build image"}),"\n",(0,i.jsxs)(n.p,{children:["To include the ",(0,i.jsx)(n.code,{children:"spidev_test"})," user-space tool in your Yocto image."]}),"\n",(0,i.jsx)(n.h4,{id:"steps",children:"Steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Create a new recipe"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"mkdir -p meta-dctk-sentinel/recipes-tools/spidev-test/files\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Copy the source file from the kernel to your recipe"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cp build/workspace/sources/linux-dct/tools/spi/spidev_test.c meta-dctk-sentinel/recipes-tools/spidev-test/files/\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Create the recipe file spidev-test_1.0.bb"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Path: meta-dctk-sentinel/recipes-tools/spidev-test/spidev-test_1.0.bb"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'DESCRIPTION = "SPI Device Test Tool"\nLICENSE = "GPL-2.0"\nLIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/GPL-2.0-only;md5=801f80980d171dd6425610833a22dbe6"\n\nSRC_URI = "file://spidev_test.c"\n\nS = "${WORKDIR}"\n\ndo_compile() {\n    ${CC} ${CFLAGS} ${LDFLAGS} -o spidev_test spidev_test.c\n}\n\ndo_install() {\n    install -d ${D}${bindir}\n    install -m 0755 spidev_test ${D}${bindir}\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Include the tool in your image"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Add the image in meta-dctk-sentinel/recipes-bsp/images/sentinel-media-oobe.bb."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'IMAGE_INSTALL:append = " spidev-test"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Build the image"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"From docker run the commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"bitbake spdev-test\nbitbake <your-image-name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will install ",(0,i.jsx)(n.code,{children:"spidev_test"})," to ",(0,i.jsx)(n.code,{children:"/usr/bin/"})," in the final image."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["You can also build the ",(0,i.jsx)(n.code,{children:"spidev_test"})," tool directly from the kernel source instead of creating a separate recipe. Please modify the kernel recipe meta-dctk-sentinel/recipes-kernel/linux/linux-dct_5.15.140.bb"]})}),"\n",(0,i.jsx)(n.h2,{id:"testing-the-spi-interface",children:"Testing the SPI interface"}),"\n",(0,i.jsx)(n.p,{children:"Use the spidev to test the spi interface by reading the JEDEC ID from the connected spi flash chip."}),"\n",(0,i.jsx)("pre",{children:(0,i.jsxs)("code",{children:[`${_.Cy}@${_.PO}:~# ./spidev_test -D /dev/spidev0.0 -p "\\x9F\\x00\\x00\\x00" -v\n`,(0,i.jsx)(n.p,{children:"spi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 kHz)\nTX | 9F 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  |....|\nRX | FF EF 60 18 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  |..`.|"}),`${_.Cy}@${_.PO}:~# ./spidev_test -D /dev/spidev1.0 -p "\\x9F\\x00\\x00\\x00" -v`,(0,i.jsx)(n.p,{children:"spi mode: 0x0\nbits per word: 8\nmax speed: 500000 Hz (500 kHz)\nTX | 9F 00 00 00 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  |....|\nRX | FF C2 25 3A __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  |..%:|"})]})})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>_,x:()=>r});var t=s(6540);const i={},d=t.createContext(i);function _(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:_(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);