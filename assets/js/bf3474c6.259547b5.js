"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[964],{6629:e=>{e.exports=JSON.parse('{"DU":"Sentinel","_E":"SOM_SL1680_Mk1","tH":"CMSAC1_AS6806_A","mQ":"sentinel_som_sl1680_mk1","zn":"EVK_SL1680_Mk1","sV":"CMCGAS_AGSL_A","UW":"sentinel-core","ND":"sentinel-media","Uf":"sentinel-media-oobe","IM":"meta-dctk-sentinel","Cy":"root","PO":"setinel"}')},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(6540);const o={},s=t.createContext(o);function r(e){const i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:i},e.children)}},9284:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Software-Documentation/Building-source/Building-a-full-image","title":"Building a full image","description":"Describes the steps to build a full yocto image.","source":"@site/docs/Software-Documentation/Building-source/Building-a-full-image.mdx","sourceDirName":"Software-Documentation/Building-source","slug":"/Software-Documentation/Building-source/Building-a-full-image","permalink":"/test/docs/Software-Documentation/Building-source/Building-a-full-image","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Building a full image","description":"Describes the steps to build a full yocto image.","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Building Source","permalink":"/test/docs/category/building-source"},"next":{"title":"Building with temporary changes","permalink":"/test/docs/Software-Documentation/Building-source/Building-with-temporary-changes"}}');var o=n(4848),s=n(8453),r=n(6629);const a={title:"Building a full image",description:"Describes the steps to build a full yocto image.",sidebar_position:1},d=void 0,c={},l=[{value:"Overview",id:"overview",level:2},{value:"Building the image",id:"building-the-image",level:2},{value:"Adding Distro features",id:"adding-distro-features",level:2},{value:"X11 Display server",id:"x11-display-server",level:3},{value:"Virtualization for OOBE",id:"virtualization-for-oobe",level:3}];function u(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(i.p,{children:["This page describes the steps to build Yocto images for ",(0,o.jsx)("code",{children:r._E})," and ",(0,o.jsx)("code",{children:r.zn}),".\nThis guide assumes that the reader already has some familiarity with Yocto concepts. If not please refer ",(0,o.jsx)(i.a,{href:"https://docs.yoctoproject.org/",children:"Yocto documentation"})," for a quick overview."]}),"\n",(0,o.jsx)(i.h2,{id:"building-the-image",children:"Building the image"}),"\n",(0,o.jsxs)(i.p,{children:["To ensure proper configuration and clean environment, the build must be performed inside a docker container.\nSynaptics provides a pre-built container at ",(0,o.jsx)(i.code,{children:"ghcr.io/synaptics-astra/crops"}),".\nTo start the container, execute the command :"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-bash",children:"docker run --rm -it -v $(pwd):$(pwd) ghcr.io/synaptics-astra/crops:1.0.0 --workdir=$(pwd)\n"})}),"\n",(0,o.jsx)(i.admonition,{type:"note",children:(0,o.jsxs)(i.p,{children:["On Ubuntu 20 and 18 LTS, the seccomp protection feature of Docker has to be disabled when creating the build container\nby adding the parameter ",(0,o.jsx)(i.code,{children:'--security-opt "seccomp=unconfined"'})," after the ",(0,o.jsx)(i.code,{children:"--rm"})," parameter in the docker command."]})}),"\n",(0,o.jsxs)(i.p,{children:["To build ",(0,o.jsx)("code",{children:r.ND})," image, execute the following commands from the ",(0,o.jsx)(i.code,{children:"sdk"})," directory"]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`MACHINE=${r.mQ} source ${r.IM}/setup/setup-environment\nbitbake ${r.ND}`})}),"\n",(0,o.jsxs)(i.p,{children:["To build ",(0,o.jsx)("code",{children:r.Uf})," image, execute the following commands from the ",(0,o.jsx)(i.code,{children:"sdk"})," directory"]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`OOBE=enabled MACHINE=${r.mQ} source ${r.IM}/setup/setup-environment\nbitbake ${r.Uf}`})}),"\n",(0,o.jsxs)(i.p,{children:["This creates a default folder named ",(0,o.jsx)(i.code,{children:"build"})," in the sdk directory. You can also specify the name of your build directory by passing it as an argument in the setup command.\nFor example to create the build folder as ",(0,o.jsx)(i.code,{children:"build-sentinel"}),", modify the command as :"]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`MACHINE=${r.mQ} source ${r.IM}/setup/setup-environment build-sentinel`})}),"\n",(0,o.jsxs)(i.p,{children:["The build folder will be the parent directory where yocto does its compilations and provide the final image.\nThe final image after the build process will be found in ",(0,o.jsx)("code",{children:`<build-dir>/tmp/deploy/images/${r.mQ}/SYNAIMG/`})]}),"\n",(0,o.jsx)(i.p,{children:"If you are rebuilding the same image for the same machine, it is recommended to clean the generated build artifacts of the\nimage before rebuilding. In order to clean, execute the command :"}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:"bitbake -c clean <image-name>"})}),"\n",(0,o.jsxs)(i.admonition,{type:"note",children:[(0,o.jsx)(i.p,{children:"The SDK is based on Synaptics' Astra SDK which is implemented for their Astra Machina Series. The Sentinel series uses the same SOC (SL1680)\nas Synaptics with some modifications. So, we will have to use Synaptics' SDK for full functionalities."}),(0,o.jsx)(i.p,{children:"For this, you must accept the End User License Agreement of Synaptics while setting up the environment to build the yocto image."})]}),"\n",(0,o.jsx)(i.h2,{id:"adding-distro-features",children:"Adding Distro features"}),"\n",(0,o.jsxs)(i.p,{children:[r.DU," Yocto SDK supports optional distribution features which can be enabled either in ",(0,o.jsx)(i.code,{children:"<build-dir>/conf/local.conf"}),"\nfile or by passing variables to the setup-environment script."]}),"\n",(0,o.jsx)(i.h3,{id:"x11-display-server",children:"X11 Display server"}),"\n",(0,o.jsxs)(i.p,{children:["In ",r.DU," SDK, Wayland is the default display server. You can set the display server to X11 by passing ",(0,o.jsx)(i.code,{children:"DISPLAY_SERVER"}),"\nvariable to the ",(0,o.jsx)(i.code,{children:"setup-environment"})," script."]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`MACHINE=${r.mQ} DISPLAY_SERVER=x11 source ${r.IM}/setup/setup-environment`})}),"\n",(0,o.jsx)(i.h3,{id:"virtualization-for-oobe",children:"Virtualization for OOBE"}),"\n",(0,o.jsxs)(i.p,{children:["Virtualization feature is added to enable the support for virtual machines and containers. To enable virtualization and OOBE support, you need to pass the ",(0,o.jsx)(i.code,{children:"OOBE"})," variable to the ",(0,o.jsx)(i.code,{children:"setup-environment"})," script."]}),"\n",(0,o.jsx)("pre",{children:(0,o.jsx)("code",{children:`MACHINE=${r.mQ} OOBE=enabled source ${r.IM}/setup/setup-environment`})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);